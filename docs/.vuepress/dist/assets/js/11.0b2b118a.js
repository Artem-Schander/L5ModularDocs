(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{339:function(t,e,s){"use strict";s.r(e);var a=s(33),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),s("p",[t._v("In most cases there is not much to consider. Just add files to your modules, keep the PSR-4 autoloading conventions in mind and you're good."),s("br"),t._v("\nHowever, some components can only be correctly used if you know how Laravel handles them.")]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"views"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#views"}},[t._v("#")]),t._v(" Views")]),t._v(" "),s("p",[t._v("To tell Laravel that you want to render a view file from a specific module, you need to use the double-colon syntax."),s("br"),t._v("\nThe "),s("code",[t._v("welcome.blade.php")]),t._v(" from the example module "),s("code",[t._v("FooBar")]),t._v(" could be rendered like this")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"FooBar::welcome"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("br"),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"translations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#translations"}},[t._v("#")]),t._v(" Translations")]),t._v(" "),s("p",[t._v("For the translations applies the same as for the views. You can access them with the double-colon syntax.")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trans")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'FooBar::example.welcome'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("br"),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"routing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#routing"}},[t._v("#")]),t._v(" Routing")]),t._v(" "),s("p",[t._v("For the routes it is not enough to get correctly loaded through PSR-4, they need to be registered by the corresponding service provider to be accessible."),s("br"),t._v("\nUnless "),s("RouterLink",{attrs:{to:"/configuration/"}},[t._v("otherwise configured")]),t._v(", the service provider will look for the files "),s("code",[t._v("routes/web.php")]),t._v(" and "),s("code",[t._v("routes/api.php")]),t._v(" and load them with the corresponding middleware and the controllers namespace."),s("br"),t._v("\nThat means you can register routes without having to enter the full namespace.")],1),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[t._v("Route"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'foo-bar'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'FooBarController'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("br"),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"migrations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#migrations"}},[t._v("#")]),t._v(" Migrations")]),t._v(" "),s("p",[t._v("For the migrations it is not enough to get correctly loaded through PSR-4, they need to be registered by the corresponding service provider to be accessible."),s("br"),t._v("\nUnless "),s("RouterLink",{attrs:{to:"/configuration/"}},[t._v("otherwise configured")]),t._v(", the service provider will expect the migrations inside the "),s("code",[t._v("database/migrations/")]),t._v(" folder of every module.")],1),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"factories"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#factories"}},[t._v("#")]),t._v(" Factories")]),t._v(" "),s("p",[t._v("For the factories applies the same as for the migrations."),s("br"),t._v("\nUnless "),s("RouterLink",{attrs:{to:"/configuration/"}},[t._v("otherwise configured")]),t._v(", the service provider will expect the factories inside the "),s("code",[t._v("database/factories/")]),t._v(" folder.")],1),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"loading-additional-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loading-additional-classes"}},[t._v("#")]),t._v(" Loading additional classes")]),t._v(" "),s("p",[t._v("Often enough there is a need to load additional classes into a module. Since Laravel loads the app using the "),s("a",{attrs:{href:"http://www.php-fig.org/psr/psr-4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PSR-4"),s("OutboundLink")],1),t._v(" autoloading standard, you can just add folders and files almost without limitations. The only thing you should keep in mind is to name the file exactly like the class name and to add the correct namespace.")]),t._v(" "),s("p",[t._v("F.a. If you want to add the "),s("code",[t._v("app/Modules/FooBar/Services/FancyService.php")]),t._v(" to your module, you can absolutely do so. The file could then look like this")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Modules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("FooBar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FancyService")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFancyStuff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'some output'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);